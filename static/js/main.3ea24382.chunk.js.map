{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/Searchbox.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robot","map","user","i","key","Scroll","props","style","overflowY","border","height","children","Searchbox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","Component","App","onSearchChange","event","setState","target","value","fetch","then","response","json","users","filteredRobot","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sOAgBeA,EAdF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GACxB,OAEI,yBAAKC,UAAW,uDACZ,yBAAKC,IAAK,SAAQC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,gCAAQF,EAAR,KACA,+BAAMC,EAAN,QCcDK,EArBE,SAAC,GAAW,IAAVC,EAAS,EAATA,MAIlB,OACE,6BAEAA,EAAMC,KAAI,SAACC,EAAMC,GAChB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAKK,EAAMG,GAAGR,GACdF,KAAMO,EAAMG,GAAGV,KACfC,MAAOM,EAAMG,GAAGT,aCLPW,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCQKC,EAXG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKlB,UAAW,OACf,2BACAA,UAAY,mCACZmB,KAAK,SAASC,YAAY,gBAC1BC,SAAUH,MCcEI,G,wDAnBd,WAAYZ,GAAO,IAAD,8BACjB,cAAMA,IACDa,MAAQ,CACZC,UAAU,GAHM,E,6DAODC,EAAOC,GACvBC,KAAKJ,MAAM,CAACC,UAAS,M,+BAIrB,OAAIG,KAAKJ,MAAMC,SACP,wDAEAG,KAAKjB,MAAMK,a,GAhBMa,cCgDZC,E,kDAzCd,aAAc,IAAD,8BACZ,gBAcDC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAfzC,EAAKX,MAAO,CACXnB,MAAO,GACPa,YAAa,IAJF,E,gEASM,IAAD,OAClBkB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKP,SAAS,CAAC5B,MAAOmC,S,+BAQ7B,IAAD,EACsBZ,KAAKJ,MAA3BnB,EADA,EACAA,MAAOa,EADP,EACOA,YACRuB,EAAgBpC,EAAMqC,QAAO,SAAArC,GAClC,OAAOA,EAAMP,KAAK6C,cAAcC,SAAS1B,EAAYyB,kBAEtD,OAAQtC,EAAMwC,OAGd,yBAAK5C,UAAY,MACjB,wBAAIA,UAAW,MAAf,gBACA,kBAAC,EAAD,CAAWkB,aAAcS,KAAKG,iBAC7B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU1B,MAAOoC,OAPnB,gD,GA3BgBZ,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAEL,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.3ea24382.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) =>{\r\n    return(\r\n        \r\n        <div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt ='robots'src={`https://robohash.org/${id}?200x200`} />\r\n            < div >\r\n                < h2 > {name} < /h2> \r\n                <p > {email} < /p> \r\n                </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\nconst CardList = ({robot})=>{\r\n\t// if (true){\r\n\t// \tthrow new Error('Nooooo Nelson!');\r\n\t// }\r\n\treturn(\r\n\t\t <div>\r\n\t\t {\r\n\t\t\trobot.map((user, i) =>{\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey={i}  \r\n\t\t\t\t\t\tid ={robot[i].id} \r\n\t\t\t\t\t\tname={robot[i].name} \r\n\t\t\t\t\t\temail={robot[i].email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n    \t</div>\r\n\t)\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t) \r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield, searchChange}) => {\r\n\treturn(\r\n\t\t<div className= 'pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' placeholder='search robots'\r\n\t\t\tonChange={searchChange} \r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Searchbox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponenDidCatch(error, info){\r\n\t\tthis.state({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oooops. That it not good</h1>\r\n\t\t}\r\n\t  return this.props.children\t\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component}from 'react';\r\nimport CardList from '../components/CardList';\r\n// import {robot} from './robot';\r\nimport Scroll from '../components/Scroll'\r\nimport Searchbox from '../components/Searchbox';\r\nimport '../containers/App.css'; \r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state ={\r\n\t\t\trobot: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response =>response.json())\r\n\t.then(users => {this.setState({robot: users})});\r\n\t\r\n}\r\n\tonSearchChange = (event) =>{\r\n\t\t\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t\r\n\t}\r\n\trender(){\r\n\t\tconst {robot, searchfield} = this.state;\r\n\t\tconst filteredRobot = robot.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\treturn !robot.length ?\r\n\t\t<h1>Loading ....</h1>:\r\n\t\t (\r\n\t\t<div className = 'tc'>\r\n\t\t<h1 className= 'f1'> RoboFriends</h1>\r\n\t\t<Searchbox searchChange={this.onSearchChange}/>\r\n\t\t <Scroll>\r\n\t\t \t<ErrorBoundry>\r\n\t\t \t<CardList robot={filteredRobot}/>\r\n\t\t \t</ErrorBoundry>\r\n\t\t </Scroll>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n// import Card from \"./Card\";\r\nimport App from './containers/App'\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"tachyons\";\r\n// import {robot} from './robot'\r\n\r\nReactDOM.render(\r\n \r\n    <React.StrictMode> \r\n    <App />\r\n    </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}